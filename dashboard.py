import streamlit as st
from PIL import Image

st.set_page_config(
    page_title="ECG Anomaly Detection Report",
    layout="wide"
)

# Utility function to safely display images
def show_img(path, caption=None, width=600):
    try:
        st.image(Image.open(path), caption=caption, use_container_width=False, width=width)
    except FileNotFoundError:
        st.warning(f"Image not found: `{path}`")

# Title
st.title("ECG Anomaly Detection: Final Report")
st.markdown("""
This report presents the end-to-end findings from a real-time ECG Anomaly Detection system developed using Isolation Forest and Kafka-based streaming.
It includes model behavior, drift analysis, anomaly interpretation, and recommendations.
---
""")

# SECTION 1: Introduction
st.header("1. Project Objective")
st.markdown("""
The goal of this project was to **detect anomalous patterns in ECG signals in real-time**, simulate production-like behavior using Kafka,
and automatically handle model updates in the presence of **concept drift**.

We built:
- A streaming pipeline using **Apache Kafka**
- Anomaly detection with **Isolation Forest**
- Drift detection using **distributional change (KS-test)**
- Model retraining logic
- Visual & explainability insights using **matplotlib** and **Streamlit**
""")

# SECTION 2: System Design
st.header("2. System Design")
st.markdown("""
The pipeline worked as follows:
1. **Producer** streamed 30,000 ECG rows from the MIT-BIH dataset to Kafka  
2. **Consumer** performed real-time anomaly detection  
3. When drift was detected, the model was **retrained** and logged  
4. Final predictions and model were evaluated at the end  
""")

# SECTION 3: Real-Time Anomaly Detection
st.header("3. Real-Time Anomaly Detection")
st.markdown("**Anomalies vs Normal Signals:**")

show_img("results/ECG Signals with Anomalies Highlighted.png", "ECG Signals with Highlighted Anomalies", width=900)
show_img("results/Anomaly Count per Simulated Minute.png", "Anomaly Density per Simulated Minute", width=900)

st.info("**Label Summary:**  \nAnomaly Count: 5,187  Normal Count: 23,723  Total Records: 28,910")

# SECTION 4: Drift Detection
st.header("4. Concept Drift Monitoring")
st.markdown("""
We used **z-score** thresholds and **distributional shift** testing (KS-Test) to detect drift.  
If anomaly density spiked beyond a set threshold, retraining was triggered.
""")
show_img("results/Z-Scores of ECG Signals Over Time.png", "Z-Score Trend with Anomaly Thresholds", width=900)
show_img("results/Heatmap of Anomalies by Hour and Day.png", "Heatmap: Anomalies by Hour and Day")

# SECTION 5: Explainability
st.header("5. Model Interpretability")
st.markdown("""
We extracted raw anomaly scores from the Isolation Forest to visualize how certain predictions were made.  
The lower the score, the more likely the instance was anomalous.
""")

col1, col2 = st.columns(2)
with col1:
    show_img("results/Distribution of Isolation Forest Anomaly Scores.png", "Distribution of Anomaly Scores")
with col2:
    show_img("results/Anomalous Points in Z-Score Space.png", "Z-Scores of Anomalous Points")

col1, col2 = st.columns(2)
with col1:
    show_img("results/Z-Score vs Anomaly Score (ECG1).png", "Z-Score vs Anomaly Score (ECG1)", width=400)
with col2:
    show_img("results/Z-Score vs Anomaly Score (ECG2).png", "Z-Score vs Anomaly Score (ECG2)", width=400)


# SECTION 6: Local Anomaly Windows
st.header("6. Local ECG Window Around Anomalies")
show_img("results/ECG Signal Snippet around Anomaly.png", "Snapshot of ECG Signal Around Detected Anomaly")

# SECTION 7: Model Evaluation
st.header("7. Model Evaluation Summary")
st.markdown("**Simulated Evaluation (2% Anomaly Assumption):**")
show_img("results/confusion_matrix.png", "Confusion Matrix on Prediction Log")

st.markdown("""
**Key Takeaways:**
- **High precision** on anomaly detection (~98%)  
- **Model retraining** helped adapt to drift during streaming  
- **Most anomalies** occurred during clustered timestamps (possible batch pattern)
""")

# SECTION 8: Retraining Timeline
st.header("8. Model Retraining Behavior")
show_img("results/retraining_timeline.png", "Retraining Events Timeline (Model Versions Over Time)")

# SECTION 9: Recommendations
st.header("9. Recommendations")
st.markdown("""
Based on the analysis and streaming behavior:

- ✅ Implement **batch retraining** once drift is detected, not per anomaly spike  
- ✅ Add **domain rules** (e.g., BPM thresholds) for hybrid logic  
- ✅ Use dashboard in **clinical monitoring setups** with alerting logic  
- ✅ Replace dummy ground truth with expert-labeled ECGs for real validation  
""")

# Footer
st.markdown("---")
st.caption("Report generated by Jahnavi Patel · Data Scientist · April 2025")
